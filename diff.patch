diff --git a/README.md b/README.md
index d60c5e8..744f0e1 100644
--- a/README.md
+++ b/README.md
@@ -96,13 +96,11 @@ The process looks like this:
  - Create service endpoints
  - Create auth middleware
  - Add cookie tokens, store data
- - TODO: Make all endpoints working
+ - Make all endpoints working
  - Add basic tests for endpoints (TODO: fill these as endpoints completed)
  - TODO: call api from website
  - TODO: get popups on website if api request fails and have spinning icon
- - TODO: Get placeholder images
+ - TODO: Get placeholder images working in about (see simon about)
  - TODO: Simon deployed
  - TODO: API used (gmail api)
  - Created API test suite
-
-TODO: When implementing mongoDB, use proper locks
diff --git a/service/index.js b/service/index.js
index 761011c..45a09aa 100644
--- a/service/index.js
+++ b/service/index.js
@@ -256,18 +256,31 @@ chatRouter.post("/message", authenticateToken, async (req, res) => {
 
 chatRouter.get("/list", authenticateToken, async (req, res) => {
   const { authUsername } = req;
-  const user = await User.findOne({ username: authUsername });
+  let allChats = [];
 
   if (authUsername === "Provo Techspert") {
-    const allUsers = await User.find({}, "username chats");
-    const allChats = {};
-    allUsers.forEach((u) => {
-      if (u.chats.size > 0) allChats[u.username] = Object.fromEntries(u.chats);
+    const allUsers = await User.find({}, "chats");
+
+    allUsers.forEach((user) => {
+      user.chats.forEach((chat, chatName) => {
+        allChats.push({ name: chatName, lastMessageAt: chat.lastMessageAt });
+      });
     });
-    return res.json(allChats);
+  } else {
+    const user = await User.findOne({ username: authUsername });
+
+    if (user) {
+      user.chats.forEach((chat, chatName) => {
+        allChats.push({ name: chatName, lastMessageAt: chat.lastMessageAt });
+      });
+    }
   }
 
-  res.json(Object.fromEntries(user.chats));
+  allChats.sort(
+    (a, b) => new Date(b.lastMessageAt) - new Date(a.lastMessageAt),
+  );
+
+  return res.json(allChats.map((chat) => chat.name));
 });
 
 chatRouter.delete("/manage", authenticateToken, async (req, res) => {
@@ -337,6 +350,6 @@ app.use((req, res) => {
   res.sendFile("index.html", { root: build_loc });
 });
 
-app.listen(port, () => {
+const httpService = app.listen(port, () => {
   console.log(`Listening on port ${port}`);
 });
diff --git a/tests/auth.test.js b/tests/auth.test.js
index 0d9f30d..7383bf6 100644
--- a/tests/auth.test.js
+++ b/tests/auth.test.js
@@ -169,28 +169,7 @@ describe("API Authentication Test Suite", () => {
     expect(text).toBe("Not authorized");
   });
 
-  // 13. API delete account success
-  test("Delete account should succeed with valid token and username", async () => {
-    const loginResponse = await fetch(`${BASE_URL}/login`, {
-      method: "POST",
-      headers,
-      body: JSON.stringify({
-        username: "DeleteMe",
-        password: "ATestPassword",
-      }),
-    });
-    const deleteCookie = loginResponse.headers.get("set-cookie");
-
-    const response = await fetch(`${BASE_URL}/manage`, {
-      method: "DELETE",
-      headers: { ...headers, Cookie: deleteCookie },
-    });
-    const text = await response.text();
-    expect(response.status).toBe(200);
-    expect(text).toBe("Deleted Account successfully");
-  });
-
-  // 14. API delete account no cookie fail
+  // 13. API delete account no cookie fail
   test("Delete account should fail without cookie", async () => {
     // Create and login to get a valid cookie
     await fetch(`${BASE_URL}/manage`, {
@@ -219,7 +198,7 @@ describe("API Authentication Test Suite", () => {
     expect(text).toBe("Not logged in");
   });
 
-  // 15. Cleanup
+  // 14. Cleanup
   test("Cleanup", async () => {
     let loginResponse = await fetch(`${BASE_URL}/login`, {
       method: "POST",
@@ -244,12 +223,15 @@ describe("API Authentication Test Suite", () => {
       }),
     });
     deleteCookie = loginResponse.headers.get("set-cookie");
-    await fetch(`${BASE_URL}/manage`, {
+    let response = await fetch(`${BASE_URL}/manage`, {
       method: "DELETE",
       headers: { ...headers, Cookie: deleteCookie },
       body: JSON.stringify({
         username: "DeleteTest",
       }),
     });
+    const text = await response.text();
+    expect(response.status).toBe(200);
+    expect(text).toBe("Deleted Account successfully");
   });
 });
diff --git a/tests/chat.test.js b/tests/chat.test.js
index 8fb3bf0..76918ca 100644
--- a/tests/chat.test.js
+++ b/tests/chat.test.js
@@ -120,7 +120,21 @@ describe("API Chat Test Suite", () => {
     expect(text).toBe("Message added");
   });
 
-  // 7. Delete chat work
+  // 7. Get list chats work
+  test("Get chat list should work with proper info", async () => {
+    const response = await fetch(`${CHAT_BASE_URL}/list`, {
+      method: "GET",
+      headers: {
+        ...headers,
+        Cookie: cookie,
+      },
+    });
+    const text = await response.text();
+    expect(response.status).toBe(200);
+    expect(text).toContain("Test chat - DeleteMe");
+  });
+
+  // 8. Delete chat work
   test("Delete chat should work with proper creds", async () => {
     const response = await fetch(`${CHAT_BASE_URL}/manage`, {
       method: "DELETE",
@@ -134,6 +148,28 @@ describe("API Chat Test Suite", () => {
     });
     const text = await response.text();
     expect(response.status).toBe(200);
+    console.log(text);
     expect(text).toBe("Chat deleted");
   });
+
+  // 9. Cleanup test account
+  test("Cleanup test account", async () => {
+    const loginResponse = await fetch(`${AUTH_BASE_URL}/login`, {
+      method: "POST",
+      headers,
+      body: JSON.stringify({
+        username: "DeleteMe",
+        password: "ATestPassword",
+      }),
+    });
+    const deleteCookie = loginResponse.headers.get("set-cookie");
+
+    const response = await fetch(`${AUTH_BASE_URL}/manage`, {
+      method: "DELETE",
+      headers: { ...headers, Cookie: deleteCookie },
+    });
+    const text = await response.text();
+    expect(response.status).toBe(200);
+    expect(text).toBe("Deleted Account successfully");
+  });
 });
